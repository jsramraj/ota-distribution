# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  server:
    build:
      context: server
    container_name: ota_server
    working_dir: /usr/src/app
    volumes: 
      - ./server:/usr/src/app
      - /usr/src/app/node_modules
    tty: true
    environment:
      NODE_ENV: production
      PORT: 4000
      MONGO_URL: mongodb://mongodb:27017/ota_dist

    command: npm run start      
    networks:
      - nodeapp-network
    ports:
      - 4000:4000
    depends_on: 
      - mongodb
    restart: on-failure
      
  mongodb:
    container_name: mongodb
    image: mongo
    ports:
      - 27017:27017    
    networks:
      - nodeapp-network

  client:
    build: 
      context: client
    container_name: ota_client
    working_dir: /usr/src/app
    networks: 
      - nodeapp-network
    volumes: 
      - ./client:/usr/src/app
      - /usr/src/app/node_modules
    tty: true
    ports: 
      - "3000:3000"
    command: npm run start
    depends_on: 
      - mongodb

networks:
  nodeapp-network:
    driver: server

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

